# -*- filetype: yaml -*-

# global variables are any simple key-value pairs
SCHEMAS_DIR: ./schemas
GENERATORS_DIR: ./generators


# if "out" is not specified
# the entry key does not "look like" a file,
# output goes to stdout
self-validate:
  in:
  - ${SCHEMAS_DIR}/Sdflow.yaml.schema.json
  - Sdflow.yaml
  run: check-jsonschema --schemafile ${in[0]} ${in[1]}

# if "out" is not specified,
# AND the entry key begins with a file identifier
# (ONLY ./, / are recognized),
# the entry key is taken as the output file path
${SCHEMAS_DIR}/Sdflow.yaml.schema.json:
  in: ${GENERATORS_DIR}/Sdflow.yaml.schema.jsonnet
  run: jsonnet $in | jq -S | tee $out
  out.sha256: 1c8a656566dacfaaaece7b5e3e52a59faca12d3803443a1a56fdd5a9a7b8e347

${SCHEMAS_DIR}/runnable.schema.json:
  in: ${GENERATORS_DIR}/runnable.schema.jsonnet
  run: jsonnet $in | jq -S | tee $out

# multiple inputs
schemas:
  - ${SCHEMAS_DIR}/Sdflow.yaml.schema.json
  - ${SCHEMAS_DIR}/runnable.schema.json

version.go:
  in: Sdflow.yaml
  out: version.go
  run: |
    today=$(date +%Y%m%d)
    git_commits_today=$(git log --pretty=format:"%cd %h" --date=format:"%Y%m%d" | tac | grep "^$today")
    number_commits_today=$(echo "$git_commits_today" | wc -l)
    latest_sha=$(echo "$git_commits_today" | tail -1 | awk '{print $NF}')

    echo 'package main

    const version = "'$today.$number_commits_today.$latest_sha'"' > $out

./default.nix:
  in:
    - version.go
    - default.nix
  run: |
    version_string=$(cat ${in.0} | tail -1 | awk '{print $NF}' | tr -d '"')
    current_default_nix=$(cat ${in.1})
    echo -e "$current_default_nix" | sed -E 's|version\s+=.+;|version = "'$version_string'";|' | tee ${in.1}

version:
  in: version.go
  run: cat $in | tail -1 | awk '{print $NF}' | tr -d '"'

build:
  in: # currently sha256 is only supported for single input
    - main.go
    - ./runnable.go
    - util.go
    - version.go
    - resources/bash_autocomplete.sh
    - resources/zsh_autocomplete.sh
  out: build/bin/sdflow
  # make dirs for nix build compat
  run: echo INPUTS; echo $in; mkdir -p $(dirname $out); go build -o $out ${in[0]} ${in[1]} ${in[2]} ${in[3]}; ln -sf ./build ./result

./runnable.go:
  in:
    schema: ${SCHEMAS_DIR}/runnable.schema.json
    packageName: main
  run: go-jsonschema -p ${in.packageName} ${in.schema} | tee $out

example-web-loader:
  in: https://json-schema.org/draft-04/hyper-schema
  in.sha256: ea8fac7c65fb589b0d53560f5251f74f9e9b243478dcb6b3ea79b5e36449c8d9
  run: curl -s $in | grep -i title

example-web-loader-to-disk:
  in: https://json-schema.org/draft-04/hyper-schema
  out: ./hyper-schema.json
  out.sha256: a29830c0ea380947e26a054e59a18bcd46d599ceef911f95d3a70b803953e15d

example-web-loader-flow:
  in: ./hyper-schema.json
  run: cat $in | jq '.links'

example-s3-loader:
  in: s3://answer-reformulation-pds/README.txt
  in.sha256: b24b59e210cefd4d964413ac555e4573470909f8aa3d16b6b9a65ddb04490b69

example-s3-loader-to-disk:
  in: s3://answer-reformulation-pds/README.txt
  out: answer-reformulation-pds-README.txt
  out.sha256: b24b59e210cefd4d964413ac555e4573470909f8aa3d16b6b9a65ddb04490b69

example-minio-loader-to-stdout:
  in: s3://testbucket/version.go

example-minio-loader-to-disk:
  in: s3://testbucket/version.go
  out: /tmp/version-minio.go

update-readme:
  in: build/bin/sdflow
  out: README.md
  run: |
    # Store top and bottom halves in variables
    TOP=$(sed '/<!-- BEGIN_SDFLOW_HELP -->/q' README.md)
    BOTTOM=$(sed -n '/<!-- END_SDFLOW_HELP -->/,$p' README.md)

    # Create new README with help content inserted
    {
      echo "$TOP"
      echo '```'
      $in --help
      echo '```'
      echo "$BOTTOM"
    } > $out
